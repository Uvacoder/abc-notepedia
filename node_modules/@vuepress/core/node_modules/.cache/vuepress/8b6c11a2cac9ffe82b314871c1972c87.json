{"remainingRequest":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/src/GIT/github.md?vue&type=template&id=45b81344&","dependencies":[{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/src/GIT/github.md","mtime":1629408546945},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJnaXRodWIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dpdGh1YiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIEdpdEh1YiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogIndoYXQtaXMtZ2l0aHViIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiN3aGF0LWlzLWdpdGh1YiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgV2hhdCBpcyBHaXRIdWIiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJXaGlsZSBnaXQgaXMgYSBzb2Z0d2FyZSwgR2l0SHViIGlzIGEgcGxhdGZvcm0gdG8gaG9zdCB5b3VyIGdpdCByZXBvc2l0b3JpZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZW1vdGUtcmVwb3NpdG9yaWVzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZW1vdGUtcmVwb3NpdG9yaWVzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgUmVtb3RlIFJlcG9zaXRvcmllcyIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImdpdC10ZWFtd29yayIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZ2l0LXRlYW13b3JrIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBHSVQgVEVBTVdPUksiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgWwogICAgICAgIF9jKCJwIiwgW192bS5fdigiaGllcyBzaW5kIG5vY2ggZWluIHBhYXIgc2FjaGVuIGRvcHBlbHQiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KCJieSB1c2luZyAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJyZW1vdGVzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBBIHJlbW90ZSBpcyBhIHNoYXJlZCBHaXQgcmVwb3NpdG9yeSB0aGF0IGFsbG93cyBtdWx0aXBsZSBjb2xsYWJvcmF0b3JzIHRvIHdvcmsgb24gdGhlIHNhbWUgR2l0IHByb2plY3QuICBJbiBvcmRlciB0byBnZXQgeW91ciBvd24gcmVwbGljYSB5b3XigJlsbCBuZWVkIHRvICIKICAgICAgICApLAogICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImNsb25lIildKSwKICAgICAgICBfdm0uX3YoIiBpdCB3aXRoOiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdpdCBjbG9uZSByZW1vdGVfbG9jYXRpb24gY2xvbmVfbmFtZVxuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIi0+aXMgeW91ciAiKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJsb2NhbCIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBjb3B5IG9mIHRoZSBHaXQgcHJvamVjdC4gSWYgeW91IGNvbW1pdCBjaGFuZ2VzIHRvIHRoZSBwcm9qZWN0IGhlcmUsIHRoZXkgYXJlIHN0aWxsIG9ubHkgbG9jYWwuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiT25lIHRoaW5nIHRoYXQgR2l0IGRvZXMgYmVoaW5kIHRoZSBzY2VuZXMgd2hlbiB5b3UgY2xvbmUgaXMgZ2l2ZSB0aGUgcmVtb3RlIGFkZHJlc3MgdGhlIG5hbWUgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigib3JpZ2luIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCBzbyB0aGF0IHlvdSBjYW4gcmVmZXIgdG8gaXQuIEluIHRoaXMgY2FzZSwgdGhlIGNsb25lZCBvcmlnaW5hbCByZW1vdGUgaXMgIgogICAgICAgICksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigib3JpZ2luIildKSwKICAgICAgICBfdm0uX3YoIi4iKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJZb3UgY2FuIHNlZSBhIGxpc3Qgb2YgYSBHaXQgcHJvamVjdOKAmXMgcmVtb3RlcyB3aXRoIHRoZSBjb21tYW5kOiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdpdCByZW1vdGUgLXZcbiIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIuKAi1x0XHRHaXQgbGlzdHMgdGhlIG5hbWUgb2YgdGhlIHJlbW90ZSwgb3JpZ2luLCBhcyB3ZWxsIGFzIGl0cyBsb2NhdGlvbi4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAi4oCLXHRcdEdpdCBhdXRvbWF0aWNhbGx5IG5hbWVzIHRoaXMgcmVtb3RlIG9yaWdpbiwgYmVjYXVzZSBpdCByZWZlcnMgdG8gdGhlIHJlbW90ZSByZXBvc2l0b3J5IG9mIG9yaWdpbi4gSG93ZXZlciwgaXQgaXMgcG9zc2libGUgdG8gc2FmZWx5IGNoYW5nZSBpdHMgbmFtZS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAi4oCLXHRcdFRoZSByZW1vdGUgaXMgbGlzdGVkIHR3aWNlOiBvbmNlIGZvciAoZmV0Y2gpIGFuZCBvbmNlIGZvciAocHVzaCkuIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBnaXQgcmVwb3NpdG9yeSBpcyBhIHByb2plY3QsIG9yIHRoZSByb290IGZvbGRlciBvZiB5b3VyIHByb2plY3QuIChjcmVhdGVkIHdpdGggIgogICAgICAgICksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJnaXQgaW5pdCIpXSksCiAgICAgICAgX3ZtLl92KCIpIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAid2hhdC1pcy1hLXJlbW90ZSIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjd2hhdC1pcy1hLXJlbW90ZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiIFdoYXQgaXMgYSByZW1vdGU/IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIkEgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigicmVtb3RlIildKSwKICAgICAgICBfdm0uX3YoIiBpcyBhIEdpdCByZXBvc2l0b3J5IHRoYXQgbGl2ZXMgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigib3V0c2lkZSIpXSksCiAgICAgICAgX3ZtLl92KCIgeW91ciBHaXQgcHJvamVjdCBmb2xkZXIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUmVtb3RlIGlzIHlvdXIgc2VydmVyIHdoZXJlIHlvdSBzdG9yZSB5b3VyIGdpdCByZXBvc2l0b3J5LiAgUmVtb3RlcyBjYW4gbGl2ZSBvbiB0aGUgd2ViLCBvbiBhIHNoYXJlZCBuZXR3b3JrIG9yIGV2ZW4gaW4gYSBzZXBhcmF0ZSBmb2xkZXIgb24geW91ciBsb2NhbCBjb21wdXRlci5XaXRoIHRoYXQsIHlvdSBzeW5jaHJvbml6ZSB5b3VyIGxvY2FsIHJlcG9zaXRvcnkgdGhhdCBpcyBvbiB5b3VyIGxhcHRvcC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJnaXQtY2xvbmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dpdC1jbG9uZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJnaXQgY2xvbmUiKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdpdCBjbG9uZSA8dXJsIG9mIGEgcmVtb3RlIHJlcG9zaXRvcnk+XG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiQ2xvbmUgcmVwb3NpdG9yeSAtIGNyZWF0ZSBhIGNvcHkgb2YgYSByZW1vdGUgcmVwb3NpdG9yeSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImFkZC1vcmlnaW4iIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2FkZC1vcmlnaW4iIH0gfSwKICAgICAgICAgIFtfdm0uX3YoIiMiKV0KICAgICAgICApLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYWRkIG9yaWdpbiIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgWwogICAgICAgICAgICBfdm0uX3YoImdpdCByZW1vdGUgYWRkIG9yaWdpbiA8dXJsIHRvIHlvdXIgR2l0SHViIHJlcG9zaXRvcnk+XG4iKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJDcmVhdGUgYSByZW1vdGUgY29weSBvZiB5b3VyIHJlcG9zaXRvcnk6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJvbCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJDcmVhdGUgYW4gZW1wdHkgbmV3IHJlcG9zaXRvcnkgb24gR2l0SHViIildKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoIlVwbG9hZCB5b3VyIGxvY2FsIHJlcG9zaXRvcnkgdG8gdGhpcyBuZXcgR2l0SHViIHJlcG9zaXRvcnkiKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNob3ciIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3Nob3ciIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoInNob3ciKV0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdpdCByZW1vdGUgc2hvd2dpdCByZW1vdGUgc2hvd1xuIildKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygicCIsIFtfdm0uX3YoIlRvIHNlZSBpZiB5b3UgaGF2ZSBhIHJlbW90ZSwgYW5kIHdoYXQgaXRzIGFsaWFzIGlzLiIpXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidWwiLCBbCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiUmVtb3RlcyBoYXZlIGEgbmFtZSxhbHNvIGNhbGxlZCBhbiBhbGlhcywgYW5kIGEgVVJMKHRoZSBsaW5rIHRvIHRoZSByZW1vdGUpIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlRoaXMgc2hvd3Mgb3JpZ2luLiBUaGlzIGlzIHRoZSBuYW1lIG9yIGFsaWFzIGZvciBvdXIgcmVtb3RlIHNlcnZlci4gVGhhdOKAmXMgdGhlIGRlZmF1bHQgbmFtZSB0aGF0IGV2ZXJ5IHJlbW90ZSByZXBvc2l0b3J5IGdldHMiCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImxhbmd1YWdlLSBleHRyYS1jbGFzcyIgfSwgWwogICAgICAgIF9jKCJwcmUiLCB7IHByZTogdHJ1ZSwgYXR0cnM6IHsgY2xhc3M6ICJsYW5ndWFnZS10ZXh0IiB9IH0sIFsKICAgICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiYGdpdCByZW1vdGUgc2hvdyBvcmlnaW5gXG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVG8gc2VlIHdoYXQgdGhlIFVSTCBvZiB0aGUgcmVtb3RlIGlzIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogInB1c2gtcHVsbC1mZXRjaCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHVzaC1wdWxsLWZldGNoIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQdXNoLCBQdWxsLCBGZXRjaCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInB1c2giIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3B1c2giIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBwdXNoIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdpdCBwdXNoIildKSwKICAgICAgICBfdm0uX3YoIiAtIHB1c2ggbG9jYWwsIGNvbW1pdHRlZCBjaGFuZ2VzIHRvIHlvdXIgcmVtb3RlIHJlcG9zaXRvcnkiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ2l0IHB1c2ggLXUgb3JpZ2luIDxicmFuY2ggbmFtZT4iKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgLSBJZiB5b3VyIGJyYW5jaCBpcyBuZXcsIHlvdSBuZWVkIHRvIGFkZCBzb21ldGhpbmcgdG8gdXBsb2FkIGl0IgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZmV0Y2giIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ZldGNoIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgZmV0Y2giKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJjb2RlIiwgW192bS5fdigiZ2l0IGZldGNoIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIC0gVG8gc2VlIGlmIHRoZXJlIGFyZSBjaGFuZ2VzIHRoYXQgc29tZW9uZSBlbHNlIHB1c2hlZCB0byByZW1vdGUiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJwdWxsIiB9IH0sIFsKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwdWxsIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiIyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgcHVsbCIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCJnaXQgcHVsbCIpXSksCiAgICAgICAgX3ZtLl92KCIgLSBUbyBwdWxsIHRoZXNlIGNoYW5nZXMgdG8geW91ciBsb2NhbCByZXBvc2l0b3J5IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJwdWxsLXJlcXVlc3RzIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNwdWxsLXJlcXVlc3RzIiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQdWxsIFJlcXVlc3RzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiQSBwdWxsIHJlcXVlc3QgaXMgYSByZXF1ZXN0IHRvIG1lcmdlIGEgYnJhbmNoIGJhY2sgdG8gbWFzdGVyIChvciBiYWNrIGludG8gdGhlIG9yaWdpbmFsIGJyYW5jaCB3aGVyZSB5b3UgYnJhbmNoZWQgaXQgZnJvbSkiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUaGUgZWFzaWVzdCB3YXkgdG8gY3JlYXRlIGEgUHVsbCBSZXF1ZXN0IGlzIHRvIGRvIHNvIGZyb20gdGhlIEdpdEh1YiB3ZWJzaXRlIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiUHVsbCBSZXF1ZXN0cyBhcmUgYSBnb29kIHdheSB0byBoYXZlIHlvdXIgdGVhbSBtYXRlcyBsb29rIGF0IHlvdXIgY29kZSBiZWZvcmUgaXQgaXMgbWVyZ2VkIGFuZCBkbyBhIGNvZGUgcmV2aWV3LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNTdHlsZTogeyB6b29tOiAiMzMlIiB9LAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4vYXNzZXRzL2dpdCBwdWxsIHJlcXVlc3Qgd29ya2Zsb3cucG5nIiksCiAgICAgICAgICBhbHQ6ICJnaXQgcHVsbCByZXF1ZXN0IHdvcmtmbG93IgogICAgICAgIH0KICAgICAgfSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJnaXQtd29ya2Zsb3ciIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dpdC13b3JrZmxvdyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgR2l0IHdvcmtmbG93IikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlIHdvcmtmbG93IGZvciBHaXQgY29sbGFib3JhdGlvbnMgdHlwaWNhbGx5IGZvbGxvd3MgdGhpcyBvcmRlcjoiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJGZXRjaCBhbmQgbWVyZ2UgY2hhbmdlcyBmcm9tIHRoZSByZW1vdGUiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkNyZWF0ZSBhIGJyYW5jaCB0byB3b3JrIG9uIGEgbmV3IHByb2plY3QgZmVhdHVyZSIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCJEZXZlbG9wIHRoZSBmZWF0dXJlIG9uIHlvdXIgYnJhbmNoIGFuZCBjb21taXQgeW91ciB3b3JrIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJGZXRjaCBhbmQgbWVyZ2UgZnJvbSB0aGUgcmVtb3RlIGFnYWluIChpbiBjYXNlIG5ldyBjb21taXRzIHdlcmUgbWFkZSB3aGlsZSB5b3Ugd2VyZSB3b3JraW5nKSIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJQdXNoIildKSwKICAgICAgICAgIF92bS5fdigiIHlvdXIgYnJhbmNoIHVwIHRvIHRoZSByZW1vdGUgZm9yIHJldmlldyIpCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoIlN0ZXBzIDEgYW5kIDQgYXJlIGEgc2FmZWd1YXJkIGFnYWluc3QgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigibWVyZ2UgY29uZmxpY3RzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLCB3aGljaCBvY2N1ciB3aGVuIHR3byBicmFuY2hlcyBjb250YWluIGZpbGUgY2hhbmdlcyB0aGF0IGNhbm5vdCBiZSBtZXJnZWQgd2l0aCB0aGUgZ2l0IG1lcmdlIGNvbW1hbmQiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiV2UgYWxzbyBsZWFybmVkIHRoZSBmb2xsb3dpbmcgY29tbWFuZHMiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInVsIiwgWwogICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIuKAi1x0XHRnaXQgY2xvbmU6IENyZWF0ZXMgYSBsb2NhbCBjb3B5IG9mIGEgcmVtb3RlLiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KCLigItcdFx0Z2l0IHJlbW90ZSAtdjogTGlzdHMgYSBHaXQgcHJvamVjdOKAmXMgcmVtb3Rlcy4iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIuKAi1x0XHRnaXQgZmV0Y2g6IEZldGNoZXMgd29yayBmcm9tIHRoZSByZW1vdGUgaW50byB0aGUgbG9jYWwgY29weS4iCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAi4oCLXHRcdGdpdCBtZXJnZSBvcmlnaW4vbWFzdGVyOiBNZXJnZXMgb3JpZ2luL21hc3RlciBpbnRvIHlvdXIgbG9jYWwgYnJhbmNoLiIKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICLigItcdFx0Z2l0IHB1c2ggb3JpZ2luIDxicmFuY2hfbmFtZT46IFB1c2hlcyBhIGxvY2FsIGJyYW5jaCB0byB0aGUgb3JpZ2luIHJlbW90ZS4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJzb2x2ZS1jb25mbGljdHMiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3NvbHZlLWNvbmZsaWN0cyIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgU29sdmUgQ29uZmxpY3RzIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVGhlcmUgbWlnaHQgYmUgYSBzaXR1YXRpb24gd2hlcmUgYm90aCB5b3VyIHRlYW0gbWF0ZSBhbmQgeW91IGNoYW5nZWQgdGhlIHNhbWUgZmlsZSwgYW5kIG5vdyB5b3Ugd2FudCB0byBtZXJnZSBib3RoIGNoYW5nZXMgaW50byBtYXN0ZXIgLT4gY29uZmxpY3QiCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigiLT4gbG9vayBhdCB0aGUgQ29kaW5nLVNjaG9vbCBIYW5kb3V0LCBvciAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOgogICAgICAgICAgICAgICAgImh0dHBzOi8vZ2l0LXNjbS5jb20vYm9vay9lbi92Mi9HaXQtQnJhbmNoaW5nLUJhc2ljLUJyYW5jaGluZy1hbmQtTWVyZ2luZyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiaGVyZSIpLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZWJhc2UiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3JlYmFzZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIiMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIFJlYmFzZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkZvbGxvd2luZyBzaXR1YXRpb246IFlvdXIgYnJhbmNoIGhhcyBjaGFuZ2VzLCBidXQgbWFzdGVyIGFsc28gaGFzIGNoYW5nZXMuIFlvdSBkb24ndCB3YW50IHRvIG1lcmdlIG1hc3RlciBpbnRvIHlvdXIgYnJhbmNoLCBidXQgeW91IHdhbnQgeW91ciBicmFuY2ggdG8gYnVpbGQgb24gdGhlIG5ld2VzdCBjb21taXRzIG9uIG1hc3Rlci4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJSZWJhc2luZyBpcyBhIGRpZmZpY3VsdCB0aGluZy4gSXQgY2FuIGJlIGEgdmFsdWFibGUgc2tpbGwga25vd2luZyBob3cgdG8gdXNlIHJlYmFzZSwgYnV0IGlmIHlvdSBoYXZlIGxpdHRsZSBleHBlcmllbmNlLCBpdCBpcyBvayB0byBub3Qga25vdyB0aGUgZGV0YWlscy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ1bCIsIFsKICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2dpdC1zY20uY29tL2Jvb2svZW4vdjIvR2l0LUJyYW5jaGluZy1SZWJhc2luZyIsCiAgICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIlJlYmFzaW5nIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAgIDEKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJbUmV3cml0aW5nIEhpc3RvcnldKCIpXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJibG9ja3F1b3RlIiwgW19jKCJwIiwgW192bS5fdigiYWIgaGllciBjb2RlY2FkZW15IildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImhyIiksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBocmVmOiAiaHR0cHM6Ly90aG91Z2h0Ym90LmNvbS91cGNhc2UvbWFzdGVyaW5nLWdpdCIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJtYXN0ZXJpbmcgZ2l0OiIpXSksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImdpdGh1Yi0yIiB9IH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNnaXRodWItMiIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgR2l0SHViIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJHaXRIdWIiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgaXMgcG9wdWxhciBob3N0aW5nIHNlcnZpY2UgZm9yIEdpdCByZXBvc2l0b3JpZXMuR2l0SHViIGFsbG93cyB5b3UgdG8gc3RvcmUgeW91ciBsb2NhbCBHaXQgcmVwb3NpdG9yaWVzIGluIHRoZSBjbG91ZC4gV2l0aCBHaXRIdWIsIHlvdSBjYW4gYmFja3VwIHlvdXIgcGVyc29uYWwgZmlsZXMsIHNoYXJlIHlvdXIgY29kZSwgYW5kIGNvbGxhYm9yYXRlIHdpdGggb3RoZXJzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJwcm9maWxlLXBhZ2UiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJpbiByZXBvc2l0b3JpZXMgPiBuZXcgIC0gIGVyemV1Z3QgZWluIG5ldWVzIHJlcG8iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIml0aXRpYWxpemUgd2l0aCByZWFkbWUgZXRjLiBvbmx5IGlmIHN0YXJ0aW5nIGZyb20gc2NyYXRjaCwgb3RoZXJ3aWVzZSB0aGVyZSBjYW4gYmUgbWVyZ2UgcHJvYmxlbXMuLi4gLT4gYmVzc2VyIG9obmUgZmlsZXMgaW5pdGlhbGlzaWVyZW4hISIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJyZWFkbXkiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX3ZtLl92KCJnaXRpZ25vcmUiKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFtfdm0uX3YoImdpdCByZW1vdGUgLXYgXG4iKV0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKCJwIiwgW192bS5fdigiLT4gc2hvd3MgcmVtb3RlIildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImdpdC1odWIiIH0gfSwgWwogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dpdC1odWIiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCIjIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBnaXQgaHViIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygib2wiLCBbCiAgICAgICAgX2MoImxpIiwgW192bS5fdigibmV1ZXMgcmVwbyBlcnpldWdlbiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiZ2l0IHJlbW90ZSBhZGQgb3JpZ2luIC0+IGVyemV1Z3RlcyByZXBvIGRlbSBhcmJlaXRzZm9sZGVyIHp1d2Vpc2VuIgogICAgICAgICAgKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgIF92bS5fdigiZ2l0IHB1c2ggLSB1IG9yaWdpbiBtYXN0ZXIgLT4gaW5oYWx0IGRlcyBmb2xkZXJzIGhvY2hwdXNoZW4iKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ3VpZGVzLmdpdGh1Yi5jb20vaW50cm9kdWN0aW9uL2Zsb3cvIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJodHRwczovL2d1aWRlcy5naXRodWIuY29tL2ludHJvZHVjdGlvbi9mbG93LyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInB1bGwtcmVxdWVzdCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcHVsbC1yZXF1ZXN0IiB9IH0sCiAgICAgICAgICBbX3ZtLl92KCIjIildCiAgICAgICAgKSwKICAgICAgICBfdm0uX3YoIiBQdWxsIFJlcXVlc3QiKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlB1bGwgUmVxdWVzdHMgaW5pdGlhdGUgZGlzY3Vzc2lvbiBhYm91dCB5b3VyIGNvbW1pdHMuIEJlY2F1c2UgdGhleSdyZSB0aWdodGx5IGludGVncmF0ZWQgd2l0aCB0aGUgdW5kZXJseWluZyBHaXQgcmVwb3NpdG9yeSwgYW55b25lIGNhbiBzZWUgZXhhY3RseSB3aGF0IGNoYW5nZXMgd291bGQgYmUgbWVyZ2VkIGlmIHRoZXkgYWNjZXB0IHlvdXIgcmVxdWVzdC4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJCeSB1c2luZyBHaXRIdWIncyBAbWVudGlvbiBzeXN0ZW0gaW4geW91ciBQdWxsIFJlcXVlc3QgbWVzc2FnZSwgeW91IGNhbiBhc2sgZm9yIGZlZWRiYWNrIgogICAgICAgICAgKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiSWYgeW91J3JlIHVzaW5nIGEgRm9yayAmIFB1bGwgTW9kZWwsIFB1bGwgUmVxdWVzdHMgcHJvdmlkZSBhIHdheSB0byBub3RpZnkgcHJvamVjdCBtYWludGFpbmVycyBhYm91dCB0aGUgY2hhbmdlcyB5b3UnZCBsaWtlIHRoZW0gdG8gY29uc2lkZXIuIElmIHlvdSdyZSB1c2luZyBhIFNoYXJlZCBSZXBvc2l0b3J5IE1vZGVsLCBQdWxsIFJlcXVlc3RzIGhlbHAgc3RhcnQgY29kZSByZXZpZXcgYW5kIGNvbnZlcnNhdGlvbiBhYm91dCBwcm9wb3NlZCBjaGFuZ2VzIGJlZm9yZSB0aGV5J3JlIG1lcmdlZCBpbnRvIHRoZSBtYWluIGJyYW5jaC4iCiAgICAgICAgICApCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJQdWxsIFJlcXVlc3QgY29tbWVudHMgYXJlIHdyaXR0ZW4gaW4gTWFya2Rvd24sIHNvIHlvdSBjYW4gZW1iZWQgaW1hZ2VzIGFuZCBlbW9qaSwgdXNlIHByZS1mb3JtYXR0ZWQgdGV4dCBibG9ja3MsIGFuZCBvdGhlciBsaWdodHdlaWdodCBmb3JtYXR0aW5nLiIKICAgICAgICAgICkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy55b3V0dWJlLmNvbS9wbGF5bGlzdD9saXN0PVBMZzdzNmNidEFEMTVHOGxOeW9hWUR1S1pTS3lKcmd3Qi0iLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlZpZGVvIHNlcmllOiBnZXQgdXAgYW5kIHJ1bm5pbmciKV0pLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgIGhyZWY6ICJodHRwczovL2xhYi5naXRodWIuY29tLyIsCiAgICAgICAgICAgICAgdGFyZ2V0OiAiX2JsYW5rIiwKICAgICAgICAgICAgICByZWw6ICJub29wZW5lciBub3JlZmVycmVyIgogICAgICAgICAgICB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJHaXRIdWIgTGVhcm5pbmcgTGFiIildKSwgX2MoIk91dGJvdW5kTGluayIpXSwKICAgICAgICAgIDEKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjogImh0dHBzOi8vZ3VpZGVzLmdpdGh1Yi5jb20vIiwKICAgICAgICAgICAgICB0YXJnZXQ6ICJfYmxhbmsiLAogICAgICAgICAgICAgIHJlbDogIm5vb3BlbmVyIG5vcmVmZXJyZXIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIkdpdEh1YiBHdWlkZXMiKV0pLCBfYygiT3V0Ym91bmRMaW5rIildLAogICAgICAgICAgMQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaHIiKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJnaXRpZ25vcmUiIH0gfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2dpdGlnbm9yZSIgfSB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgLmdpdGlnbm9yZSIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5wbHVyYWxzaWdodC5jb20vZ3VpZGVzL2hvdy10by11c2UtZ2l0aWdub3JlLWZpbGUiLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfdm0uX3YoImhvdy10by11c2UtZ2l0aWdub3JlIiksIF9jKCJPdXRib3VuZExpbmsiKV0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJociIpLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNoYW5nZS1mcm9tLXBhc3N3b3JkLXRvLXNzaCIgfSB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY2hhbmdlLWZyb20tcGFzc3dvcmQtdG8tc3NoIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW192bS5fdigiIyIpXQogICAgICAgICksCiAgICAgICAgX3ZtLl92KCIgQ2hhbmdlIGZyb20gUGFzc3dvcmQgdG8gU1NIIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfdm0uX3YoImNoZWNrIHRoZSBjdXJyZW50IHJlbW90ZSBVUkw6IildKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGFuZ3VhZ2UtIGV4dHJhLWNsYXNzIiB9LCBbCiAgICAgICAgX2MoInByZSIsIHsgcHJlOiB0cnVlLCBhdHRyczogeyBjbGFzczogImxhbmd1YWdlLXRleHQiIH0gfSwgWwogICAgICAgICAgX2MoImNvZGUiLCBbX3ZtLl92KCIkIGdpdCByZW1vdGUgLXZcbiIpXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsYW5ndWFnZS0gZXh0cmEtY2xhc3MiIH0sIFsKICAgICAgICBfYygicHJlIiwgeyBwcmU6IHRydWUsIGF0dHJzOiB7IGNsYXNzOiAibGFuZ3VhZ2UtdGV4dCIgfSB9LCBbCiAgICAgICAgICBfYygiY29kZSIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJnaXQgcmVtb3RlIHNldC11cmwgb3JpZ2luICoqKkB2cy1zc2gudmlzdWFsc3R1ZGlvLmNvbTp2My8qKiovUFJPSi9QUk9KXG4iCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}