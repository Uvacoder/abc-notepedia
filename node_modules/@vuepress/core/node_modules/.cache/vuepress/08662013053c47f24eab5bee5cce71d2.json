{"remainingRequest":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/src/CSS/flexbox.md?vue&type=template&id=0af8ce3b&","dependencies":[{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/src/CSS/flexbox.md","mtime":1617133999177},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/sh/Dropbox/SH @Coding/_PROJEKTE/Codepedia/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yJyx7YXR0cnM6eyJzbG90LWtleSI6X3ZtLiRwYXJlbnQuc2xvdEtleX19LFtfYygnaDEnLHthdHRyczp7ImlkIjoiZmxleGJveCJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2ZsZXhib3gifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgRmxleGJveCIpXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwOi8vZmxleGJveGZyb2dneS5jb20vI2RlIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCJmbGV4Ym94ZnJvZ2d5LmNvbSAtIEdBTUUiKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2Nzcy10cmlja3MuY29tL3NuaXBwZXRzL2Nzcy9hLWd1aWRlLXRvLWZsZXhib3gvIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCJBIGNvbXBsZXRlIEd1aWRlIHRvIEZsZXhib3ggLSBDU1MtVHJpY2tzIiksX2MoJ091dGJvdW5kTGluaycpXSwxKV0pLF92bS5fdigiICIpLF9jKCdsaScsW19jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19mbGV4Ym94LmFzcCIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiQ1NTIEZsZXhib3ggLSB3M3NjaG9vbHMiKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kZS9kb2NzL0xlYXJuL0NTUy9DU1NfbGF5b3V0L0ZsZXhib3giLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfdm0uX3YoIkZsZXhib3ggLSBNRE4iKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwOi8vZmxleGJveC5oZWxwLyIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiZmxleGJveC5oZWxwIiksX2MoJ091dGJvdW5kTGluaycpXSwxKV0pLF92bS5fdigiICIpLF9jKCdsaScsW19jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly9sb2FkaW5nLmlvL2ZsZXhib3gvIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCJGbGV4Ym94IEdlbmVyYXRvciIpLF9jKCdPdXRib3VuZExpbmsnKV0sMSldKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vc2NvdGNoLmlvL3R1dG9yaWFscy9hLXZpc3VhbC1ndWlkZS10by1jc3MzLWZsZXhib3gtcHJvcGVydGllcyIsInRhcmdldCI6Il9ibGFuayIsInJlbCI6Im5vb3BlbmVyIG5vcmVmZXJyZXIifX0sW192bS5fdigiQSB2aXN1YWwgR3VpZGUgdG8gRmxleGJveCBQcm9wZXJ0aWVzIiksX2MoJ091dGJvdW5kTGluaycpXSwxKV0pLF92bS5fdigiICIpLF9jKCdsaScsW19jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly9kZW1vcy5zY290Y2guaW8vdmlzdWFsLWd1aWRlLXRvLWNzczMtZmxleGJveC1mbGV4Ym94LXBsYXlncm91bmQvZGVtb3MvIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCJGbGV4Ym94IFBsYXlncm91bmQiKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3d3dy5iaXRvdmkuY29tL2Jsb2cvdXNlLWZsZXhib3gtdG8tY3JlYXRlLWEtc3RpY2t5LWhlYWRlci1hbmQtc2lkZWJhci13aXRoLWZsZXhpYmxlLWNvbnRlbnQiLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfdm0uX3YoInVzZS1mbGV4Ym94LXRvLWNyZWF0ZS1hLXN0aWNreS1oZWFkZXItYW5kLXNpZGViYXItd2l0aC1mbGV4aWJsZS1jb250ZW50IiksX2MoJ091dGJvdW5kTGluaycpXSwxKV0pLF92bS5fdigiICIpLF9jKCdsaScsW19jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cudGFuaWFyYXNjaWEuY29tL2Vhc2llc3QtZmxleC1ncmlkLWV2ZXIvIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX3ZtLl92KCJFYXNpZXN0IEZsZXgtR3JpZCBldmVyIiksX2MoJ091dGJvdW5kTGluaycpXSwxKV0pLF92bS5fdigiICIpLF9jKCdsaScsW19jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cuZmxleGJveC5pby8iLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfdm0uX3YoImZsZXhib3guaW8iKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSldKSxfdm0uX3YoIiAiKSxfYygnaHInKSxfdm0uX3YoIiAiKSxfYygnaDInLHthdHRyczp7ImlkIjoiZmxleGJveC1iYXNpY3MifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNmbGV4Ym94LWJhc2ljcyJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiBGbGV4Ym94IEJhc2ljcyIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIkluIGZsZXhib3gsIHRoZSBvdXRlciBib3ggaXMgY2FsbGVkIHRoZSAiKSxfYygnc3Ryb25nJyxbX3ZtLl92KCJjb250YWluZXIiKV0pLF92bS5fdigiLiBUaGUgaW5uZXIgYm94ZXMgKHRoZSBjb2x1bW5zKSBhcmUgY2FsbGVkIHRoZSAiKSxfYygnc3Ryb25nJyxbX3ZtLl92KCJpdGVtcyIpXSksX3ZtLl92KCIuIEFueSBlbGVtZW50IGNhbiBiZSBhIGZsZXggY29udGFpbmVyLiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlRoZSAiKSxfYygnc3Ryb25nJyxbX3ZtLl92KCJmbGV4IGNvbnRhaW5lciIpXSksX3ZtLl92KCIgKHBhcmVudCkgYmVjb21lcyBmbGV4aWJsZSBieSBzZXR0aW5nIHRoZSBkaXNwbGF5IHByb3BlcnR5IHRvIGZsZXg6ICIpLF9jKCdjb2RlJyxbX3ZtLl92KCIqKmRpc3BsYXk6ZmxleCoqIildKSxfdm0uX3YoIiBvciAiKSxfYygnY29kZScsW192bS5fdigiKipkaXNwbGF5OmlubGluZS1mbGV4KioiKV0pXSksX3ZtLl92KCIgIiksX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJsYW5ndWFnZS1jc3MgZXh0cmEtY2xhc3MifSxbX2MoJ3ByZScse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJsYW5ndWFnZS1jc3MifX0sW19jKCdjb2RlJyxbX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gc2VsZWN0b3IifX0sW192bS5fdigiZGl2LmNvbnRhaW5lciIpXSksX3ZtLl92KCIgIiksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigieyIpXSksX3ZtLl92KCJcbiAgIiksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHJvcGVydHkifX0sW192bS5fdigiZGlzcGxheSIpXSksX2MoJ3NwYW4nLHtwcmU6dHJ1ZSxhdHRyczp7ImNsYXNzIjoidG9rZW4gcHVuY3R1YXRpb24ifX0sW192bS5fdigiOiIpXSksX3ZtLl92KCIgZmxleCIpLF9jKCdzcGFuJyx7cHJlOnRydWUsYXR0cnM6eyJjbGFzcyI6InRva2VuIHB1bmN0dWF0aW9uIn19LFtfdm0uX3YoIjsiKV0pLF92bS5fdigiXG4iKSxfYygnc3Bhbicse3ByZTp0cnVlLGF0dHJzOnsiY2xhc3MiOiJ0b2tlbiBwdW5jdHVhdGlvbiJ9fSxbX3ZtLl92KCJ9IildKSxfdm0uX3YoIlxuIildKV0pXSksX2MoJ3AnLFtfdm0uX3YoIkluIHRoZSBleGFtcGxlIGFib3ZlLCBhbGwgZGl2cyB3aXRoIHRoZSBjbGFzcyBjb250YWluZXIgYXJlIGZsZXggY29udGFpbmVycy4gSWYgdGhleSBoYXZlIGNoaWxkcmVuLCB0aGUgY2hpbGRyZW4gYXJlIGZsZXggaXRlbXMuIildKSxfdm0uX3YoIiAiKSxfYygndWwnLFtfYygnbGknLFtfdm0uX3YoIkEgZGl2IHdpdGggdGhlIGRlY2xhcmF0aW9uICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJkaXNwbGF5OiBmbGV4OyIpXSksX3ZtLl92KCIgd2lsbCByZW1haW4gYmxvY2sgbGV2ZWwg4oCUIG5vIG90aGVyIGVsZW1lbnRzIHdpbGwgYXBwZWFyIG9uIHRoZSBzYW1lIGxpbmUgYXMgaXQuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIkJ1dCBpdCB3aWxsIGNoYW5nZSB0aGUgYmVoYXZpb3Igb2YgaXRzIGNoaWxkIGVsZW1lbnRzOiBDaGlsZCBlbGVtZW50cyB3aWxsIG5vdCBiZWdpbiBvbiBuZXcgbGluZXMuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfYygnY29kZScsW192bS5fdigiZGlzcGxheTogaW5saW5lLWZsZXgiKV0pLF92bS5fdigiIGNyZWF0ZXMgZmxleCBjb250YWluZXJzIHRoYXQgYXJlIGFsc28gaW5saW5lIGVsZW1lbnRzIC0+IGFsbG93cyBtdWx0aXBsZSBmbGV4IGNvbnRhaW5lcnMgdG8gYXBwZWFyIGlubGluZSB3aXRoIGVhY2ggb3RoZXIuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIndlbm4gZGVyIGNvbnRlbnQgbmljaHQgcGFzc3QsIGRhbm4gd8OkY2hzdCBkZXIgcGFyZW50IildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIndlbm4gYWxsZSAiKSxfYygnY29kZScsW192bS5fdigiZmxleC1ncm93OjEiKV0pLF92bS5fdigiIGhhYmVuLCBzaW5kIGFsbGUgZ2xlaWNoIGdyb3NzIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIlN0ZXAgMTogbWFrZSBJdGVtIGFzIHNtYWxsIGFzIHBvc3NpYmxlLCBTdGVwIDI6IHRyeSB0byBhcHBseSBncm93IildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoImFsbCBmbGV4IGl0ZW1zIHNocmluayBwcm9wb3J0aW9uYWxseSB3aGVuIHRoZSBmbGV4IGNvbnRhaW5lciBpcyB0b28gc21hbGwuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIklmIGEgIiksX2MoJ2NvZGUnLFtfdm0uX3YoIm1heC13aWR0aCIpXSksX3ZtLl92KCIgaXMgc2V0IGZvciBhbiBlbGVtZW50LCBpdCB3aWxsIG5vdCBncm93IGxhcmdlciB0aGFuIHRoYXQgZXZlbiBpZiB0aGVyZSBpcyBtb3JlIHNwYWNlIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIkZsZXggY29udGFpbmVycyBjYW4gYmUgbmVzdGVkIGluc2lkZSBvZiBlYWNoIG90aGVyIGJ5IGRlY2xhcmluZyAiKSxfYygnY29kZScsW192bS5fdigiZGlzcGxheTogZmxleCIpXSksX3ZtLl92KCIgb3IgIiksX2MoJ2NvZGUnLFtfdm0uX3YoImRpc3BsYXk6IGlubGluZS1mbGV4IildKSxfdm0uX3YoIiBmb3IgY2hpbGRyZW4gb2YgZmxleCBjb250YWluZXJzLiIpXSldKSxfdm0uX3YoIiAiKSxfYygnaDInLHthdHRyczp7ImlkIjoiZmxleC1jb250YWluZXItcHJvcGVydGllcyJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2ZsZXgtY29udGFpbmVyLXByb3BlcnRpZXMifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgRmxleCBDb250YWluZXIgcHJvcGVydGllcyA6IildKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiZmxleC1kaXJlY3Rpb24ifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNmbGV4LWRpcmVjdGlvbiJ9fSxbX3ZtLl92KCIjIildKSxfdm0uX3YoIiAiKSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vd3d3Lnczc2Nob29scy5jb20vY3NzL2NzczNfZmxleGJveF9jb250YWluZXIuYXNwI2ZsZXgtZGlyZWN0aW9uIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoImZsZXgtZGlyZWN0aW9uIildKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCJkZWZpbmVzIGluIHdoaWNoICIpLF9jKCdzdHJvbmcnLFtfdm0uX3YoImRpcmVjdGlvbiIpXSksX3ZtLl92KCIgdGhlIGNvbnRhaW5lciB3YW50cyB0byBzdGFjayB0aGUgZmxleCBpdGVtcyAoaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSBtYWluIGFuZCBjcm9zcyBheGVzKS4gQnkgZGVmYXVsdCwgdGhlICIpLF9jKCdzdHJvbmcnLFtfdm0uX3YoIm1haW4gYXhpcyIpXSksX3ZtLl92KCIgaXMgaG9yaXpvbnRhbCAocm93KSBhbmQgdGhlIGNyb3NzIGF4aXMgaXMgdmVydGljYWwuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIlZhbHVlczogIiksX2MoJ2VtJyxbX3ZtLl92KCJyb3cgKGRlZmF1bHQpLCByb3ctcmV2ZXJzZSwgY29sdW1uLCBjb2x1bW4tcmV2ZXJzZSIpXSldKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIlRoZSBtYWluIGF4aXMgaXMgdXNlZCBmb3I6ICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJqdXN0aWZ5LWNvbnRlbnQsIGZsZXgtd3JhcCwgZmxleC1ncm93LCBmbGV4LXNocmluayIpXSksX3ZtLl92KCIuIFRoZSBjcm9zcyBheGlzIGlzIHVzZWQgZm9yOiAiKSxfYygnY29kZScsW192bS5fdigiYWxpZ24taXRlbXMsIGFsaWduLWNvbnRlbnQiKV0pXSldKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiZmxleC13cmFwIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZmxleC13cmFwIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19mbGV4Ym94X2NvbnRhaW5lci5hc3AjZmxleC13cmFwIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoImZsZXgtd3JhcCIpXSksX2MoJ091dGJvdW5kTGluaycpXSwxKV0pLF92bS5fdigiICIpLF9jKCd1bCcsW19jKCdsaScsW192bS5fdigic3BlY2lmaWVzIHdoZXRoZXIgdGhlIGZsZXggaXRlbXMgc2hvdWxkICIpLF9jKCdzdHJvbmcnLFtfdm0uX3YoIndyYXAgb3Igbm90IildKSxfdm0uX3YoIi4gKCBzaGlmdCBhbG9uZyB0aGUgY3Jvc3MgYXhpcyBpZiB0aGUgZmxleCBjb250YWluZXIgaXMgbm90IGxhcmdlIGVub3VnaCkiKV0pLF92bS5fdigiICIpLF9jKCdsaScsW192bS5fdigiVmFsdWVzOiAiKSxfYygnZW0nLFtfdm0uX3YoIndyYXAsIG5vd3JhcCAoZGVmYXVsdCksIHdyYXAtcmV2ZXJzZSIpXSldKV0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJmbGV4LWZsb3cifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNmbGV4LWZsb3cifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJoaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19mbGV4Ym94X2NvbnRhaW5lci5hc3AjZmxleC1mbG93In19LFtfYygnY29kZScsW192bS5fdigiZmxleC1mbG93IildKV0pXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCJpcyBhIHNob3J0aGFuZCBwcm9wZXJ0eSBmb3Igc2V0dGluZyBib3RoIHRoZSBmbGV4LWRpcmVjdGlvbiBhbmQgZmxleC13cmFwIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfYygnY29kZScsW192bS5fdigiZmxleC1mbG93OiBkaXJlY3Rpb24gd3JhcDsiKV0pXSldKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoianVzdGlmeS1jb250ZW50In19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjanVzdGlmeS1jb250ZW50In19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19mbGV4Ym94X2NvbnRhaW5lci5hc3AjanVzdGlmeS1jb250ZW50IiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoImp1c3RpZnktY29udGVudCIpXSksX2MoJ091dGJvdW5kTGluaycpXSwxKV0pLF92bS5fdigiICIpLF9jKCd1bCcsW19jKCdsaScsW192bS5fdigidXNlZCB0byBzcGFjZSBpdGVtcyBhbG9uZyB0aGUgbWFpbiBheGlzIC0gKGhvcml6b250YWxseSBmcm9tIGxlZnQgdG8gcmlnaHQpLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJUaGUgc2l6ZSBvZiBlYWNoIGl0ZW0gaXMgbm90IGNoYW5nZWQuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIlZhbHVlczogIiksX2MoJ2VtJyxbX3ZtLl92KCJjZW50ZXIsIGZsZXgtc3RhcnQgKGRlZmF1bHQpLCBmbGV4LWVuZCwgc3BhY2UtYXJvdW5kIChlcXVhbCBzcGFjZSBiZWZvcmUrYWZ0ZXIgaXRlbXMpLCBzcGFjZS1iZXR3ZWVuIChlcXVhbCBzcGFjZSBiZXR3ZWVuLCBubyBleHRyYSBzcGFjZSBAc3RhcnQvZW5kKSIpXSldKV0pLF92bS5fdigiICIpLF9jKCdpbWcnLHtzdGF0aWNTdHlsZTp7Inpvb20iOiI1MCUifSxhdHRyczp7InNyYyI6ImZpbGU6Ly8vVXNlcnMvc2gvRHJvcGJveC9TSCUyMEBDb2RpbmcvQENvZGUvU0glMjBDb2RlcGVkaWEvYXNzZXRzL2ZsZXglMjBqdXN0aWZ5LWNvbnRlbnQucG5nIiwiYWx0IjoiZmxleCBqdXN0aWZ5LWNvbnRlbnQifX0pLF92bS5fdigiICIpLF9jKCdoMycse2F0dHJzOnsiaWQiOiJhbGlnbi1pdGVtcyJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2FsaWduLWl0ZW1zIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19mbGV4Ym94X2NvbnRhaW5lci5hc3AjYWxpZ24taXRlbXMiLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfYygnY29kZScsW192bS5fdigiYWxpZ24taXRlbXMiKV0pLF9jKCdPdXRib3VuZExpbmsnKV0sMSldKSxfdm0uX3YoIiAiKSxfYygndWwnLFtfYygnbGknLFtfYygncCcsW192bS5fdigiaXMgdXNlZCB0byBzcGFjZSBpdGVtcyBhbG9uZyB0aGUgY3Jvc3MgYXhpcyAodmVydGljYWxseSkuICh3aXRoaW4gYSBzaW5nbGUgcm93KSIpXSldKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfYygncCcsW192bS5fdigiVmFsdWVzOiAiKSxfYygnZW0nLFtfdm0uX3YoImNlbnRlciwgZmxleC1zdGFydCwgZmxleC1lbmQsIHN0cmV0Y2ggKGRlZmF1bHQpLCBiYXNlbGluZSAoYm90dG9tIGFsaWduZWQgd2l0aCBlYWNoIG90aGVyKSIpXSldKV0pXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfYygnZW0nLFtfdm0uX3YoIiogc3RyZXRjaDogZWxlbWVudHMgd2l0aCBhIHNwZWNpZmllZCBoZWlnaHQgd2lsbCBub3Qgc3RyZXRjaDsgZWxlbWVudHMgd2l0aCBhIG1pbmltdW0gaGVpZ2h0IG9yIG5vIGhlaWdodCBzcGVjaWZpZWQgd2lsbCBzdHJldGNoKS4iKV0pXSksX3ZtLl92KCIgIiksX2MoJ2ltZycse3N0YXRpY1N0eWxlOnsiem9vbSI6IjUwJSJ9LGF0dHJzOnsic3JjIjoiZmlsZTovLy9Vc2Vycy9zaC9Ecm9wYm94L1NIJTIwQENvZGluZy9AQ29kZS9TSCUyMENvZGVwZWRpYS9hc3NldHMvZmxleC1hbGlnbi1pdGVtcy5wbmciLCJhbHQiOiJmbGV4LWFsaWduLWl0ZW1zIn19KSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiYWxpZ24tY29udGVudCJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2FsaWduLWNvbnRlbnQifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2Nzcy9jc3MzX2ZsZXhib3hfY29udGFpbmVyLmFzcCNhbGlnbi1jb250ZW50IiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoImFsaWduLWNvbnRlbnQiKV0pLF9jKCdPdXRib3VuZExpbmsnKV0sMSldKSxfdm0uX3YoIiAiKSxfYygndWwnLFtfYygnbGknLFtfdm0uX3YoIklmIGEgZmxleCBjb250YWluZXIgaGFzIG11bHRpcGxlIHJvd3Mgb2YgY29udGVudCwgd2UgY2FuIHVzZSBhbGlnbi1jb250ZW50IHRvIHNwYWNlIHRoZSByb3dzIGZyb20gdG9wIHRvIGJvdHRvbS4iKV0pLF92bS5fdigiICIpLF9jKCdsaScsW192bS5fdigiSXQgaXMgdXNlZCB0byBzcGFjZSByb3dzIGFsb25nIHRoZSBjcm9zcyBheGlzLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJWYWx1ZXM6ICIpLF9jKCdlbScsW192bS5fdigiZmxleC1zdGFydCwgZmxleC1lbmQsIGNlbnRlciwgc3RyZXRjaCwgc3BhY2UtYXJvdW5kIChlcXVhbCBzcGFjZSksIHNwYWNlLWJldHdlZW4gKGVxdWFsIHNwYWNlIGV4Y2VwdCBzdGFydC9lbmQpIildKV0pXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIioqIHN0cmV0Y2g6IGlmIGEgbWluaW11bSBoZWlnaHQgb3Igbm8gaGVpZ2h0IGlzIHNwZWNpZmllZCoiKV0pLF92bS5fdigiICIpLF9jKCdocicpLF92bS5fdigiICIpLF9jKCdoMicse2F0dHJzOnsiaWQiOiJmbGV4LWl0ZW0tcHJvcGVydGllcyJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2ZsZXgtaXRlbS1wcm9wZXJ0aWVzIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiIEZsZXggSXRlbSBwcm9wZXJ0aWVzOiIpXSksX3ZtLl92KCIgIiksX2MoJ3AnLFtfdm0uX3YoIlRoZSBkaXJlY3QgY2hpbGQgZWxlbWVudHMgb2YgYSBmbGV4IGNvbnRhaW5lciBhdXRvbWF0aWNhbGx5IGJlY29tZXMgZmxleGlibGUgKGZsZXgpIGl0ZW1zLiIpXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6Im9yZGVyIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjb3JkZXIifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2Nzcy9jc3MzX2ZsZXhib3hfaXRlbXMuYXNwI29yZGVyIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoIm9yZGVyIildKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCJzcGVjaWZpZXMgdGhlIG9yZGVyIG9mIHRoZSBmbGV4IGl0ZW1zLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJUaGUgb3JkZXIgdmFsdWUgbXVzdCBiZSBhIG51bWJlciwgZGVmYXVsdCB2YWx1ZSBpcyAwLiIpXSldKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiZmxleC1ncm93In19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZmxleC1ncm93In19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19mbGV4Ym94X2l0ZW1zLmFzcCNmbGV4LWdyb3ciLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfYygnY29kZScsW192bS5fdigiZmxleC1ncm93IildKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCJzcGVjaWZpZXMgaG93IG11Y2ggYSBmbGV4IGl0ZW0gd2lsbCBncm93IHJlbGF0aXZlIHRvIHRoZSByZXN0IG9mIHRoZSBmbGV4IGl0ZW1zIGlmIHRoZXJlIGlzIHNwYWNlLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJUaGUgdmFsdWUgbXVzdCBiZSBhIG51bWJlciwgZGVmYXVsdCB2YWx1ZSBpcyAwLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJNYXJnaW5zIGFyZSB1bmFmZmVjdGVkIGJ5IGZsZXgtZ3JvdyBhbmQgZmxleC1zaHJpbmsuXG5taW5pbXVtIGFuZCBtYXhpbXVtIHdpZHRocyB3aWxsIHRha2UgcHJlY2VkZW5jZSBvdmVyIGZsZXgtZ3JvdyBhbmQgZmxleC1zaHJpbmsiKV0pXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6ImZsZXgtc2hyaW5rIn19LFtfYygnYScse3N0YXRpY0NsYXNzOiJoZWFkZXItYW5jaG9yIixhdHRyczp7ImhyZWYiOiIjZmxleC1zaHJpbmsifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2Nzcy9jc3MzX2ZsZXhib3hfaXRlbXMuYXNwI2ZsZXgtc2hyaW5rIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoImZsZXgtc2hyaW5rIildKSxfYygnT3V0Ym91bmRMaW5rJyldLDEpXSksX3ZtLl92KCIgIiksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCJzcGVjaWZpZXMgaG93IG11Y2ggYSBmbGV4IGl0ZW0gd2lsbCBzaHJpbmsgcmVsYXRpdmUgdG8gdGhlIHJlc3Qgb2YgdGhlIGZsZXggaXRlbXMuIFRoZSB2YWx1ZSBtdXN0IGJlIGEgbnVtYmVyLCBkZWZhdWx0IHZhbHVlIGlzIDEuIildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoImZsZXgtc2hyaW5rIHdpbGwgb25seSBiZSBlbXBsb3llZCBpZiB0aGUgcGFyZW50IGNvbnRhaW5lciBpcyB0b28gc21hbGwgb3IgdGhlIGJyb3dzZXIgaXMgYWRqdXN0ZWQiKV0pXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6ImZsZXgtYmFzaXMifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNmbGV4LWJhc2lzIn19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19mbGV4Ym94X2l0ZW1zLmFzcCNmbGV4LWJhc2lzIiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoImZsZXgtYmFzaXMiKV0pLF9jKCdPdXRib3VuZExpbmsnKV0sMSldKSxfdm0uX3YoIiAiKSxfYygndWwnLFtfYygnbGknLFtfdm0uX3YoInNwZWNpZmllcyB0aGUgaW5pdGlhbCBsZW5ndGggb2YgYSBmbGV4IGl0ZW0gYmVmb3JlIGl0IHN0cmV0Y2hlcyBvciBzaHJpbmtzLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJzaW1pbGFyIHRvICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJ3aWR0aCIpXSksX3ZtLl92KCIuIGlmICIpLF9jKCdjb2RlJyxbX3ZtLl92KCJmbGV4LWRpcmVjdGlvbjogY29sdW1uIildKSxfdm0uX3YoIjogZmxleC1iYXNpcz1oZWlnaHRcbiIpLF9jKCd1bCcsW19jKCdsaScsW192bS5fdigiV2UgY2FuIHRoaW5rIG9mIGZsZXgtYmFzaXMgYXMgdGhlIHdpZHRoIE9SIGhlaWdodCAoZGVwZW5kaW5nIG9uIGZsZXgtZGlyZWN0aW9uKSIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJmbGV4LWJhc2lzIGlzIGxpbWl0ZWQgYnkgYm90aCBtYXgtd2lkdGgvbWF4LWhlaWdodCBhbmQgbWluLXdpZHRoL21pbi1oZWlnaHQiKV0pLF92bS5fdigiICIpLF9jKCdsaScsW192bS5fdigiV2hlbiBkZWNsYXJlZCwgZmxleC1iYXNpcyB3aWxsIG92ZXJyaWRlIHRoZSB3aWR0aC9oZWlnaHQgcHJvcGVydHkgc2V0IG9uIGEgZmxleCBjb250YWluZXIiKV0pLF92bS5fdigiICIpLF9jKCdsaScsW192bS5fdigiSWYgbm8gZmxleC1iYXNpcyBpcyBzcGVjaWZpZWQgdGhlIGRlZmF1bHQgaXMgdGhlIHNldCB3aWR0aC9oZWlnaHQgdmFsdWUsIGlmIHdpZHRoL2hlaWdodCBpc27igJl0IHNwZWNpZmllZCB0aGUgZGVmYXVsdCBpcyB0aGUgd2lkdGgvaGVpZ2h0IG9mIHRoZSBjb250ZW50IildKSxfdm0uX3YoIiAiKSxfYygnbGknLFtfdm0uX3YoIldoZW4gdGhlcmUgaXMgbm90IGVub3VnaCBzcGFjZSBmb3Igb3VyIGZsZXggaXRlbXMgb3VyIGl0ZW1zIHdpbGwgc2hyaW5rIGF0IGFuIGV2ZW4gcmF0ZSB0byBmaXQgd2l0aGluIHRoZSBjb250YWluZXIgYnkgZGVmYXVsdCIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJJZiB0aGVyZSBpcyB0b28gbXVjaCBzcGFjZSB3ZSBjYW4gZGVjbGFyZSBmbGV4LWdyb3c6IDE7IG9uIG91ciBmbGV4IGl0ZW1zIHRvIG1ha2UgdGhlbSBncm93IGF0IGFuIGV2ZW4gcmF0ZSIpXSldKV0pXSksX3ZtLl92KCIgIiksX2MoJ2gzJyx7YXR0cnM6eyJpZCI6ImZsZXgifX0sW19jKCdhJyx7c3RhdGljQ2xhc3M6ImhlYWRlci1hbmNob3IiLGF0dHJzOnsiaHJlZiI6IiNmbGV4In19LFtfdm0uX3YoIiMiKV0pLF92bS5fdigiICIpLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly93d3cudzNzY2hvb2xzLmNvbS9jc3MvY3NzM19mbGV4Ym94X2l0ZW1zLmFzcCNmbGV4IiwidGFyZ2V0IjoiX2JsYW5rIiwicmVsIjoibm9vcGVuZXIgbm9yZWZlcnJlciJ9fSxbX2MoJ2NvZGUnLFtfdm0uX3YoImZsZXgiKV0pLF9jKCdPdXRib3VuZExpbmsnKV0sMSldKSxfdm0uX3YoIiAiKSxfYygndWwnLFtfYygnbGknLFtfdm0uX3YoImlzIGEgc2hvcnRoYW5kIHByb3BlcnR5IGZvciB0aGUgZmxleC1ncm93LCBmbGV4LXNocmluaywgYW5kIGZsZXgtYmFzaXMgcHJvcGVydGllcy4iKV0pLF92bS5fdigiICIpLF9jKCdsaScsW19jKCdjb2RlJyxbX3ZtLl92KCJmbGV4OiBncm93IHNocmluayBiYXNpczsiKV0pXSldKSxfdm0uX3YoIiAiKSxfYygnaDMnLHthdHRyczp7ImlkIjoiYWxpZ24tc2VsZiJ9fSxbX2MoJ2EnLHtzdGF0aWNDbGFzczoiaGVhZGVyLWFuY2hvciIsYXR0cnM6eyJocmVmIjoiI2FsaWduLXNlbGYifX0sW192bS5fdigiIyIpXSksX3ZtLl92KCIgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL3d3dy53M3NjaG9vbHMuY29tL2Nzcy9jc3MzX2ZsZXhib3hfaXRlbXMuYXNwI2FsaWduLXNlbGYiLCJ0YXJnZXQiOiJfYmxhbmsiLCJyZWwiOiJub29wZW5lciBub3JlZmVycmVyIn19LFtfYygnY29kZScsW192bS5fdigiYWxpZ24tc2VsZiIpXSksX2MoJ091dGJvdW5kTGluaycpXSwxKV0pLF92bS5fdigiICIpLF9jKCd1bCcsW19jKCdsaScsW192bS5fdigic3BlY2lmaWVzIHRoZSBhbGlnbm1lbnQgZm9yIHRoZSBzZWxlY3RlZCBpdGVtIGluc2lkZSB0aGUgZmxleGlibGUgY29udGFpbmVyLiIpXSksX3ZtLl92KCIgIiksX2MoJ2xpJyxbX3ZtLl92KCJJdCBvdmVycmlkZXMgdGhlIGRlZmF1bHQgYWxpZ25tZW50IHNldCBieSB0aGUgY29udGFpbmVyJ3MgYWxpZ24taXRlbXMgcHJvcGVydHkuIildKV0pXSl9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}